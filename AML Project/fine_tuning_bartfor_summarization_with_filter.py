# -*- coding: utf-8 -*-
"""Fine_Tuning_BartFor_Summarization_with_Filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NygnBXiBzo4886McJ9Cs-wnEC05__M9x

# Fine-tuning BART for summarization with filtration

---

## Setup

---

**The comments for this will be mostly similar to that of the previous model I will add the additional comments wherever necessary**
"""

!pip install transformers[torch]
!pip install accelerate -U

# !pip install spacy==3.0.6     # install spaCy (version 3.0.6)
!python -m spacy download en_core_web_lg    # download en_core_web_lg model

import re
import spacy
nlp = spacy.load("en_core_web_lg")

# Defining the functions for filtering the data

def entity_based_filtered_sentences(example):
    # if not (text and summary):
    #     return ""
    text = example["article"]                                                   # The text parts of the input
    summary = example["highlights"]                                             # The summary parts of the input
    doc = nlp(summary)
    sentences_select = {}
    for sent in doc.sents:
        sentences_select[sent.text] = True
    for e in doc.ents:
        if e[0].ent_type_ in ['PERSON', 'FAC', 'GPE', 'ORG', 'NORP', 'LOC', 'EVENT']:
            # match_result = re.search(e.text,text)
            # print(e,match_result)
            # if match_result==None:
            if e.text.lower() not in text.lower():
                # print(e)
                sentences_select[e.sent.text] = False
    result = []
    for sent in doc.sents:
        if sentences_select[sent.text]:
            result.append(sent.text)
    filter_summary =  " ".join(result)
    example["highlights"] = filter_summary
    return example

def create_ent_augmented_target(example):
    text = example["article"]
    summary = example["highlights"]
    entity_summary = []
    doc = nlp(summary)
    entities = []
    for e in doc.ents:
        if e[0].ent_type_ in ['PERSON', 'FAC', 'GPE', 'ORG', 'NORP', 'LOC', 'EVENT']:
            if e.text.lower() in text.lower():
                entities.append(e.text)

    entity_summary =  " ".join(entities)
    entity_summary = entity_summary + " " + summary
    example["highlights"] = entity_summary
    return example

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# ! pip install transformers
# ! pip install datasets
# ! pip install sentencepiece
# ! pip install rouge_score
# ! pip install wandb

import json

# Same as earlier

import torch
import numpy as np
import datasets

from transformers import (
    AutoModelForSeq2SeqLM,
    AutoTokenizer,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
    DataCollatorForSeq2Seq,
)

from tabulate import tabulate
import nltk
from datetime import datetime

WANDB_INTEGRATION = True
if WANDB_INTEGRATION:
    import wandb

    wandb.login()

"""## Set language

---

English
"""

language = "english"

"""## Model and tokenizer

---

Download model and tokenizer. Use default parameters or try custom values (see [HF Bart configuration](https://huggingface.co/transformers/_modules/transformers/configuration_bart.html) and [Fairseq Bart](https://github.com/pytorch/fairseq/tree/master/examples/bart)).
"""

# Same as earlier

model_name = "facebook/bart-base"

model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Set model parameters or use the default
# print(model.config)

# tokenization
encoder_max_length = 256
decoder_max_length = 64

"""## Data

---

### Download
"""

data_complete = datasets.load_dataset("cnn_dailymail",'3.0.0',split="train[:10%]")

data_complete[0]

"""### Prepare

**Format and split into train and validation sets**
"""

# Same as earlier

def flatten(example):
    return {
        "document": example["article"]["document"],
        "summary": example["article"]["summary"],
    }


def list2samples(example):
    documents = []
    summaries = []
    for sample in zip(example["article"], example["highlights"]):
        if len(sample[0]) > 0:
            documents += sample[0]
            summaries += sample[1]
    return {"document": documents, "summary": summaries}


# dataset = data.map(flatten, remove_columns=["article", "url"])
# dataset = data.map(list2samples, batched=True)

train_data_txt, validation_data_txt = data_complete.train_test_split(test_size=0.1).values()

train_data_txt[0]

# Apply 'entity_based_filtered_sentences' to filter sentences based on entities
train_data_filtered = [entity_based_filtered_sentences(example) for example in train_data_txt]

# Convert the filtered data into dataset
train_data_filtered_dataset = datasets.Dataset.from_dict({
    "article": [example["article"] for example in train_data_filtered],
    "highlights": [example["highlights"] for example in train_data_filtered],
    "id":[example["id"] for example in train_data_filtered]
})

# Block to save the filtered data

import pickle

with open('train_data_filtered_dataset.pkl', 'wb') as file:
    pickle.dump(train_data_filtered_dataset, file)

from google.colab import files

files.download('train_data_filtered_dataset.pkl')

# Apply 'create_ent_augmented_target' to create an augmented target with entities
train_data_augmented = [create_ent_augmented_target(example) for example in train_data_filtered]

# Convert the filtered data into dataset
train_data_augmented_dataset = datasets.Dataset.from_dict({
    "article": [example["article"] for example in train_data_augmented],
    "highlights": [example["highlights"] for example in train_data_augmented],
    "id":[example["id"] for example in train_data_augmented]
})

# Block to save the filtered data

import pickle

with open('train_data_augmented_dataset.pkl', 'wb') as file:
    pickle.dump(train_data_augmented_dataset, file)

from google.colab import files

files.download('train_data_augmented_dataset.pkl')

# Showing the formed training data

print(type(train_data_augmented))
print(train_data_augmented[0])

# Showing the formed validation data

print(type(validation_data_txt))
print(validation_data_txt[0])

"""**Preprocess and tokenize**"""

# Same as before

def batch_tokenize_preprocess(batch, tokenizer, max_source_length, max_target_length):
    source, target = batch["article"], batch["highlights"]
    source_tokenized = tokenizer(
        source, padding="max_length", truncation=True, max_length=max_source_length
    )
    target_tokenized = tokenizer(
        target, padding="max_length", truncation=True, max_length=max_target_length
    )

    batch = {k: v for k, v in source_tokenized.items()}
    # Ignore padding in the loss
    batch["labels"] = [
        [-100 if token == tokenizer.pad_token_id else token for token in l]
        for l in target_tokenized["input_ids"]
    ]
    return batch


train_data = train_data_augmented_dataset.map(
    lambda batch: batch_tokenize_preprocess(
        batch, tokenizer, encoder_max_length, decoder_max_length
    ),
    batched=True,
    remove_columns=train_data_txt.column_names,
)

validation_data = validation_data_txt.map(
    lambda batch: batch_tokenize_preprocess(
        batch, tokenizer, encoder_max_length, decoder_max_length
    ),
    batched=True,
    remove_columns=validation_data_txt.column_names,
)

"""## Training

---

### Metrics
"""

# Borrowed from https://github.com/huggingface/transformers/blob/master/examples/seq2seq/run_summarization.py

nltk.download("punkt", quiet=True)

metric = datasets.load_metric("rouge")


def postprocess_text(preds, labels):
    preds = [pred.strip() for pred in preds]
    labels = [label.strip() for label in labels]

    # rougeLSum expects newline after each sentence
    preds = ["\n".join(nltk.sent_tokenize(pred)) for pred in preds]
    labels = ["\n".join(nltk.sent_tokenize(label)) for label in labels]

    return preds, labels


def compute_metrics(eval_preds):
    preds, labels = eval_preds
    if isinstance(preds, tuple):
        preds = preds[0]
    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)
    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Some simple post-processing
    decoded_preds, decoded_labels = postprocess_text(decoded_preds, decoded_labels)

    result = metric.compute(
        predictions=decoded_preds, references=decoded_labels, use_stemmer=True
    )
    # Extract a few results from ROUGE
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}

    prediction_lens = [
        np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds
    ]
    result["gen_len"] = np.mean(prediction_lens)
    result = {k: round(v, 4) for k, v in result.items()}
    return result

"""### Training arguments"""

from transformers import Seq2SeqTrainingArguments, Seq2SeqTrainer

!pip install accelerate==0.20.1

training_args = Seq2SeqTrainingArguments(
    output_dir="results",
    num_train_epochs=1,  # demo
    do_train=True,
    do_eval=True,
    per_device_train_batch_size=4,  # demo
    per_device_eval_batch_size=4,
    # learning_rate=3e-05,
    warmup_steps=500,
    weight_decay=0.1,
    label_smoothing_factor=0.1,
    predict_with_generate=True,
    logging_dir="logs",
    logging_steps=50,
    save_total_limit=3,
)

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_data,
    eval_dataset=validation_data,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)

"""### Train

Wandb integration
"""

if WANDB_INTEGRATION:
    wandb_run = wandb.init(
        project="Fine-tune Bart on CNN-daily filtered",
        config={
            "per_device_train_batch_size": training_args.per_device_train_batch_size,
            "learning_rate": training_args.learning_rate,
            "dataset": "Fine-tune Bart on CNN-daily filtered"
        },
    )

    now = datetime.now()
    current_time = now.strftime("%H%M%S")
    wandb_run.name = "run_" + "Fine-tune Bart on CNN-daily filtered" + "_" + current_time

"""Evaluate before fine-tuning"""

trainer.evaluate()

"""Train the model"""

# Commented out IPython magic to ensure Python compatibility.
# %%wandb
# # uncomment to display Wandb charts
# 
# trainer.train()

"""Evaluate after fine-tuning"""

trainer.evaluate()

if WANDB_INTEGRATION:
    wandb_run.finish()

"""## Evaluation

---

**Generate summaries from the fine-tuned model and compare them with those generated from the original, pre-trained one.**
"""

def generate_summary(test_samples, model):
    inputs = tokenizer(
        test_samples["article"],
        padding="max_length",
        truncation=True,
        max_length=encoder_max_length,
        return_tensors="pt",
    )
    input_ids = inputs.input_ids.to(model.device)
    attention_mask = inputs.attention_mask.to(model.device)
    outputs = model.generate(input_ids, attention_mask=attention_mask)
    output_str = tokenizer.batch_decode(outputs, skip_special_tokens=True)
    return outputs, output_str


model_before_tuning = AutoModelForSeq2SeqLM.from_pretrained(model_name)

test_samples = validation_data_txt.select(range(16))

summaries_before_tuning = generate_summary(test_samples, model_before_tuning)[1]
summaries_after_tuning = generate_summary(test_samples, model)[1]

print(
    tabulate(
        zip(
            range(len(summaries_after_tuning)),
            summaries_after_tuning,
            summaries_before_tuning,
        ),
        headers=["Id", "Summary after", "Summary before"],
    )
)
print("\nTarget summaries:\n")
print(
    tabulate(list(enumerate(test_samples["highlights"])), headers=["Id", "Target summary"])
)
print("\nSource documents:\n")
print(tabulate(list(enumerate(test_samples["article"])), headers=["Id", "Document"]))

trainer.save_model("finetune_cnn_dm_filtered")

!zip -r /content/finetune_cnn_dm_filtered.zip /content/finetune_cnn_dm_filtered

from google.colab import files
files.download('/content/finetune_cnn_dm_filtered.zip')