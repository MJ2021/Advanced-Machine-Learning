# -*- coding: utf-8 -*-
"""Fine_TuningBart_For_Summarization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eSwPze8tubTd3CaMXHWfeWXeU1P7PTNi

# Fine-tuning BART for summarization

---

## Setup

---
"""

# Commented out IPython magic to ensure Python compatibility.
# # Installing the required dependencies
# 
# %%capture
# ! pip install transformers
# ! pip install datasets
# ! pip install sentencepiece
# ! pip install rouge_score
# ! pip install wandb

!pip install accelerate -U

import torch
import numpy as np
import datasets

# Importing the required libraries from transformers

from transformers import (
    AutoModelForSeq2SeqLM,
    AutoTokenizer,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
    DataCollatorForSeq2Seq,
)

from tabulate import tabulate
import nltk
from datetime import datetime

# Using wandb integration to show weights and biases and monitor loss to give a graphical representation

WANDB_INTEGRATION = True
if WANDB_INTEGRATION:
    import wandb

    wandb.login()

"""## Set language

---

English
"""

language = "english"           # Setting the text language to English

"""## Model and tokenizer

---

Download model and tokenizer. Use default parameters or try custom values (see [HF Bart configuration](https://huggingface.co/transformers/_modules/transformers/configuration_bart.html) and [Fairseq Bart](https://github.com/pytorch/fairseq/tree/master/examples/bart)).
"""

model_name = "facebook/bart-base"                                # Using a base bart model
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)        # Using the pretrained model for our purpose
tokenizer = AutoTokenizer.from_pretrained(model_name)            # Using the pretrained model for tokenizer

# tokenization
encoder_max_length = 512                                        # Setting parameters of tokenization
decoder_max_length = 128

"""## Data

---

### Download
"""

data = datasets.load_dataset("cnn_dailymail",'3.0.0',split="train[:10%]")               # Downloading the CNN-Dailymail dataset

"""For demonstration, we are only using a small portion of the data."""

data[5]                                                     # Showing an example of data

"""### Prepare

**Format and split into train and validation sets**
"""

train_data_txt, validation_data_txt = data.train_test_split(test_size=0.1).values()             # Splitting the data into training and validation

train_data_txt                                                                                  # Features of training data

"""**Preprocess and tokenize**"""

def batch_tokenize_preprocess(batch, tokenizer, max_source_length, max_target_length):
    source, target = batch["article"], batch["highlights"]                                    # Divinding data into source and target
    source_tokenized = tokenizer(                                                             # Applying the tokenizer to source
        source, padding="max_length", truncation=True, max_length=max_source_length
    )
    target_tokenized = tokenizer(                                                             # Applying the tokenizer to target
        target, padding="max_length", truncation=True, max_length=max_target_length
    )

    batch = {k: v for k, v in source_tokenized.items()}                                       # Iterating through the tokens of source
    # Ignore padding in the loss
    batch["labels"] = [                                                                       # Giving labels to tokens
        [-100 if token == tokenizer.pad_token_id else token for token in l]
        for l in target_tokenized["input_ids"]
    ]
    return batch                                                                              # Returns the updated batch

train_data = train_data_txt.map(                                                              # Generate training data using the above defined function
    lambda batch: batch_tokenize_preprocess(
        batch, tokenizer, encoder_max_length, decoder_max_length
    ),
    batched=True,
    remove_columns=train_data_txt.column_names,
)

validation_data = validation_data_txt.map(                                                    # Generate validation data using the above defined function
    lambda batch: batch_tokenize_preprocess(
        batch, tokenizer, encoder_max_length, decoder_max_length
    ),
    batched=True,
    remove_columns=validation_data_txt.column_names,
)

"""## Training

---

### Metrics
"""

# Borrowed from https://github.com/huggingface/transformers/blob/master/examples/seq2seq/run_summarization.py

nltk.download("punkt", quiet=True)
metric = datasets.load_metric("rouge")                                            # Using the rouge matrix for evaluation


def postprocess_text(preds, labels):
    preds = [pred.strip() for pred in preds]                                      # Stripping the predictions
    labels = [label.strip() for label in labels]                                  # Stripping the labels

    # rougeLSum expects newline after each sentence
    preds = ["\n".join(nltk.sent_tokenize(pred)) for pred in preds]               # Adding new line after each prediction
    labels = ["\n".join(nltk.sent_tokenize(label)) for label in labels]           # Adding new line after each label

    return preds, labels


def compute_metrics(eval_preds):                                                  # Defining the computation metrics
    preds, labels = eval_preds
    if isinstance(preds, tuple):
        preds = preds[0]
    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)       # Decoding the predictions
    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)     # Decoding the labels

    # Some simple post-processing
    decoded_preds, decoded_labels = postprocess_text(decoded_preds, decoded_labels)   # Processing to evaluate metrics

    result = metric.compute(                                                      # Gives the evaluated metric
        predictions=decoded_preds, references=decoded_labels, use_stemmer=True
    )
    # Extract a few results from ROUGE
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}

    prediction_lens = [
        np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds
    ]
    result["gen_len"] = np.mean(prediction_lens)                                  # Mean of predictions
    result = {k: round(v, 4) for k, v in result.items()}                          # Showing the results
    return result

"""### Training arguments"""

# Training arguments for the transformer

training_args = Seq2SeqTrainingArguments(
    output_dir="results",
    num_train_epochs=1,  # demo                                               # Due to less computation power
    do_train=True,
    do_eval=True,
    per_device_train_batch_size=4,  # demo
    per_device_eval_batch_size=4,
    # learning_rate=3e-05,
    warmup_steps=500,
    weight_decay=0.1,
    label_smoothing_factor=0.1,
    predict_with_generate=True,
    logging_dir="logs",
    logging_steps=50,
    save_total_limit=3,
)

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

# Defining the trainer for transformer

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_data,
    eval_dataset=validation_data,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)

import transformers
import accelerate

print("Transformers version:", transformers.__version__)
print("Accelerate version:", accelerate.__version__)

"""### Train

Wandb integration
"""

if WANDB_INTEGRATION:
    wandb_run = wandb.init(
        project="Fine-tune Bart on CNN-daily Only",
        config={
            "per_device_train_batch_size": training_args.per_device_train_batch_size,
            "learning_rate": training_args.learning_rate,
            "dataset": "Fine-tune Bart on CNN-daily Only"
        },
    )

    now = datetime.now()
    current_time = now.strftime("%H%M%S")
    wandb_run.name = "run_" + "Fine-tune Bart on CNN-daily Only" + "_" + current_time

"""Evaluate before fine-tuning"""

trainer.evaluate()            # Evaluating the current trainer without any fine tuning

"""Train the model"""

# Commented out IPython magic to ensure Python compatibility.
# %%wandb
# # uncomment to display Wandb charts
# 
# trainer.train()

"""Evaluate after fine-tuning"""

trainer.evaluate()                 # Evaluating after fine tuning

if WANDB_INTEGRATION:
    wandb_run.finish()

"""## Evaluation

---

**Generate summaries from the fine-tuned model and compare them with those generated from the original, pre-trained one.**
"""

# Comparing the results from before after fine tuning

def generate_summary(test_samples, model):                                      # Giving inputs as test samples and our model
    inputs = tokenizer(                                                         # Generating input tokenizer
        test_samples["article"],
        padding="max_length",
        truncation=True,
        max_length=encoder_max_length,
        return_tensors="pt",
    )
    input_ids = inputs.input_ids.to(model.device)                               # Generating input ids
    attention_mask = inputs.attention_mask.to(model.device)                     # Generating attention mask
    outputs = model.generate(input_ids, attention_mask=attention_mask)          # Final output
    output_str = tokenizer.batch_decode(outputs, skip_special_tokens=True)      # Stripping and decoding
    return outputs, output_str


model_before_tuning = AutoModelForSeq2SeqLM.from_pretrained(model_name)

test_samples = validation_data_txt.select(range(16))

summaries_before_tuning = generate_summary(test_samples, model_before_tuning)[1]
summaries_after_tuning = generate_summary(test_samples, model)[1]

# Printing and showing the final results

print(
    tabulate(
        zip(
            range(len(summaries_after_tuning)),
            summaries_after_tuning,
            summaries_before_tuning,
        ),
        headers=["Id", "Summary after", "Summary before"],
    )
)
print("\nTarget summaries:\n")
print(
    tabulate(list(enumerate(test_samples["highlights"])), headers=["Id", "Target summary"])
)
print("\nSource documents:\n")
print(tabulate(list(enumerate(test_samples["article"])), headers=["Id", "Document"]))

trainer.save_model("bart_orig")         # Saving the model

!zip -r /content/bart_orig.zip /content/bart_orig